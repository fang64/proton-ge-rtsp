From 3dac384018f5b28f0afa2679fcffc06278c98602 Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Tue, 21 May 2024 08:25:47 +0200
Subject: [PATCH 31/43] mf: Send sample requests for unused space of sample
 queue on pause => restart.

---
 dlls/mf/samplegrabber.c | 27 ++++++++++++++-------------
 1 file changed, 14 insertions(+), 13 deletions(-)

diff --git a/dlls/mf/samplegrabber.c b/dlls/mf/samplegrabber.c
index de599139736..77a05a6adc1 100644
--- a/dlls/mf/samplegrabber.c
+++ b/dlls/mf/samplegrabber.c
@@ -91,6 +91,7 @@ struct sample_grabber
     CRITICAL_SECTION cs;
     UINT32 sample_count;
     IMFSample *samples[MAX_SAMPLE_QUEUE_LENGTH];
+    UINT32 samples_requested;
 };
 
 static IMFSampleGrabberSinkCallback *sample_grabber_get_callback(const struct sample_grabber *sink)
@@ -411,7 +412,8 @@ static HRESULT stream_queue_sample(struct sample_grabber *grabber, IMFSample *sa
 
 static void sample_grabber_stream_request_sample(struct sample_grabber *grabber)
 {
-    IMFStreamSink_QueueEvent(&grabber->IMFStreamSink_iface, MEStreamSinkRequestSample, &GUID_NULL, S_OK, NULL);
+    if (SUCCEEDED(IMFStreamSink_QueueEvent(&grabber->IMFStreamSink_iface, MEStreamSinkRequestSample, &GUID_NULL, S_OK, NULL)))
+        grabber->samples_requested++;
 }
 
 static HRESULT WINAPI sample_grabber_stream_ProcessSample(IMFStreamSink *iface, IMFSample *sample)
@@ -423,12 +425,13 @@ static HRESULT WINAPI sample_grabber_stream_ProcessSample(IMFStreamSink *iface,
 
     TRACE("%p, %p.\n", iface, sample);
 
-    if (!sample)
-        return S_OK;
-
     EnterCriticalSection(&grabber->cs);
 
-    if (grabber->is_shut_down)
+    grabber->samples_requested--;
+
+    if (!sample)
+        hr = S_OK;
+    else if (grabber->is_shut_down)
         hr = MF_E_STREAMSINK_REMOVED;
     else if (grabber->state == SINK_STATE_RUNNING || (grabber->state == SINK_STATE_PAUSED && grabber->ignore_clock))
     {
@@ -780,7 +783,7 @@ static HRESULT WINAPI sample_grabber_stream_timer_callback_Invoke(IMFAsyncCallba
             }
         }
     }
-    if (sample_delivered)
+    if (sample_delivered && grabber->samples_requested < MAX_SAMPLE_QUEUE_LENGTH)
         sample_grabber_stream_request_sample(grabber);
 
     LeaveCriticalSection(&grabber->cs);
@@ -1195,19 +1198,17 @@ static HRESULT sample_grabber_set_state(struct sample_grabber *grabber, enum sin
 
             if (state == SINK_STATE_RUNNING && grabber->state != SINK_STATE_RUNNING)
             {
-                /* Every transition to running state sends a bunch requests to build up initial queue. */
-                for (i = 0; i < grabber->sample_count; ++i)
+                if (grabber->state == SINK_STATE_PAUSED && offset == PRESENTATION_CURRENT_POSITION)
                 {
-                    if (grabber->state == SINK_STATE_PAUSED && offset == PRESENTATION_CURRENT_POSITION)
+                    for (i = 0; i < grabber->sample_count; ++i)
                     {
                         assert(grabber->samples[i]);
                         stream_queue_sample(grabber, grabber->samples[i]);
                     }
-                    else
-                    {
-                        sample_grabber_stream_request_sample(grabber);
-                    }
                 }
+                /* Every transition to running state sends a bunch requests to build up initial queue. */
+                for (i = grabber->samples_requested; i < MAX_SAMPLE_QUEUE_LENGTH; ++i)
+                    sample_grabber_stream_request_sample(grabber);
                 release_samples(grabber);
                 grabber->sample_count = 0;
             }
-- 
2.45.2

