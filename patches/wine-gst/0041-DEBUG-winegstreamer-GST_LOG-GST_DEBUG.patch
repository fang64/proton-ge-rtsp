From 62ef0a44da0d1e592137fa1475a68985d154e95b Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Tue, 19 Mar 2024 10:20:49 +0100
Subject: [PATCH 41/46] [DEBUG] winegstreamer: GST_LOG -> GST_DEBUG.

---
 dlls/winegstreamer/wg_parser.c | 34 +++++++++++++++++-----------------
 1 file changed, 17 insertions(+), 17 deletions(-)

diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index 1b252f4dc60..2b641ba67c7 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -701,7 +701,7 @@ static NTSTATUS wg_parser_stream_notify_qos(void *args)
         /* This can happen legitimately if the sample falls outside of the
          * segment bounds. GStreamer elements shouldn't present the sample in
          * that case, but DirectShow doesn't care. */
-        GST_LOG("Ignoring QoS event.");
+        GST_DEBUG("Ignoring QoS event.");
         return S_OK;
     }
     if (!(event = gst_event_new_qos(params->underflow ? GST_QOS_TYPE_UNDERFLOW : GST_QOS_TYPE_OVERFLOW,
@@ -918,7 +918,7 @@ static gboolean sink_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
     struct wg_parser_stream *stream = gst_pad_get_element_private(pad);
     struct wg_parser *parser = stream->parser;
 
-    GST_LOG("stream %p, type \"%s\".", stream, GST_EVENT_TYPE_NAME(event));
+    GST_DEBUG("stream %p, type \"%s\".", stream, GST_EVENT_TYPE_NAME(event));
 
     switch (event->type)
     {
@@ -1032,7 +1032,7 @@ static GstFlowReturn sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *bu
     struct wg_parser_stream *stream = gst_pad_get_element_private(pad);
     struct wg_parser *parser = stream->parser;
 
-    GST_LOG("stream %p, buffer %p.", stream, buffer);
+    GST_DEBUG("stream %p, buffer %p.", stream, buffer);
 
     pthread_mutex_lock(&parser->mutex);
 
@@ -1058,7 +1058,7 @@ static GstFlowReturn sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *bu
 
     if (!stream->enabled)
     {
-        GST_LOG("Stream is disabled; discarding buffer.");
+        GST_DEBUG("Stream is disabled; discarding buffer.");
         pthread_mutex_unlock(&parser->mutex);
         gst_buffer_unref(buffer);
         return GST_FLOW_OK;
@@ -1089,7 +1089,7 @@ static GstFlowReturn sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *bu
      * reference to the stream object, which will release it in
      * wg_parser_stream_release_buffer(). */
 
-    GST_LOG("Buffer queued.");
+    GST_DEBUG("Buffer queued.");
     return GST_FLOW_OK;
 }
 
@@ -1098,7 +1098,7 @@ static gboolean sink_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
     struct wg_parser_stream *stream = gst_pad_get_element_private(pad);
     struct wg_parser *parser = stream->parser;
 
-    GST_LOG("stream %p, type \"%s\".", stream, gst_query_type_get_name(query->type));
+    GST_DEBUG("stream %p, type \"%s\".", stream, gst_query_type_get_name(query->type));
 
     switch (query->type)
     {
@@ -1130,7 +1130,7 @@ static gboolean sink_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
                 gst_structure_remove_fields(gst_caps_get_structure(caps, i),
                         "framerate", "pixel-aspect-ratio", NULL);
 
-            GST_LOG("Stream caps are \"%" GST_PTR_FORMAT "\".", caps);
+            GST_DEBUG("Stream caps are \"%" GST_PTR_FORMAT "\".", caps);
 
             if (filter)
             {
@@ -1411,7 +1411,7 @@ static void stream_decodebin_pad_added_cb(GstElement *element, GstPad *pad, gpoi
     struct wg_parser_stream *stream = user;
     struct wg_parser *parser = stream->parser;
 
-    GST_LOG("stream %p, parser %p, element %p, pad %p.", stream, parser, element, pad);
+    GST_DEBUG("stream %p, parser %p, element %p, pad %p.", stream, parser, element, pad);
 
     if (gst_pad_is_linked(pad))
         return;
@@ -1425,7 +1425,7 @@ static bool stream_decodebin_create(struct wg_parser_stream *stream)
 {
     struct wg_parser *parser = stream->parser;
 
-    GST_LOG("stream %p, parser %p.", stream, parser);
+    GST_DEBUG("stream %p, parser %p.", stream, parser);
 
     if (!(stream->decodebin = create_element("decodebin", "base")))
         return false;
@@ -1440,7 +1440,7 @@ static bool stream_decodebin_create(struct wg_parser_stream *stream)
     pthread_mutex_unlock(&parser->mutex);
     gst_element_sync_state_with_parent(stream->decodebin);
 
-    GST_LOG("Created stream decodebin %p for %u.", stream->decodebin, stream->number);
+    GST_DEBUG("Created stream decodebin %p for %u.", stream->decodebin, stream->number);
 
     return true;
 }
@@ -1451,7 +1451,7 @@ static void pad_added_cb(GstElement *element, GstPad *pad, gpointer user)
     struct wg_parser *parser = user;
     GstCaps *caps;
 
-    GST_LOG("parser %p, element %p, pad %p.", parser, element, pad);
+    GST_DEBUG("parser %p, element %p, pad %p.", parser, element, pad);
 
     if (gst_pad_is_linked(pad))
         return;
@@ -1498,7 +1498,7 @@ static void pad_removed_cb(GstElement *element, GstPad *pad, gpointer user)
     unsigned int i;
     char *name;
 
-    GST_LOG("parser %p, element %p, pad %p.", parser, element, pad);
+    GST_DEBUG("parser %p, element %p, pad %p.", parser, element, pad);
 
     for (i = 0; i < parser->stream_count; ++i)
     {
@@ -1557,7 +1557,7 @@ static GstFlowReturn issue_read_request(struct wg_parser *parser, guint64 offset
 
     pthread_mutex_unlock(&parser->mutex);
 
-    GST_LOG("Request returned %s.", gst_flow_get_name(ret));
+    GST_DEBUG("Request returned %s.", gst_flow_get_name(ret));
 
     return ret;
 }
@@ -1666,7 +1666,7 @@ static GstFlowReturn src_getrange_cb(GstPad *pad, GstObject *parent,
 {
     struct wg_parser *parser = gst_pad_get_element_private(pad);
 
-    GST_LOG("pad %p, offset %" G_GINT64_MODIFIER "u, size %u, buffer %p.", pad, offset, size, *buffer);
+    GST_DEBUG("pad %p, offset %" G_GINT64_MODIFIER "u, size %u, buffer %p.", pad, offset, size, *buffer);
 
     if (offset == GST_BUFFER_OFFSET_NONE)
         offset = parser->next_pull_offset;
@@ -1680,7 +1680,7 @@ static GstFlowReturn src_getrange_cb(GstPad *pad, GstObject *parent,
         if (!*buffer)
             *buffer = gst_buffer_new_and_alloc(0);
         gst_buffer_set_size(*buffer, 0);
-        GST_LOG("Returning empty buffer.");
+        GST_DEBUG("Returning empty buffer.");
         return GST_FLOW_OK;
     }
 
@@ -1701,7 +1701,7 @@ static gboolean src_query_cb(GstPad *pad, GstObject *parent, GstQuery *query)
     struct wg_parser *parser = gst_pad_get_element_private(pad);
     GstFormat format;
 
-    GST_LOG("parser %p, type %s.", parser, GST_QUERY_TYPE_NAME(query));
+    GST_DEBUG("parser %p, type %s.", parser, GST_QUERY_TYPE_NAME(query));
 
     switch (GST_QUERY_TYPE(query))
     {
@@ -2005,7 +2005,7 @@ static gboolean src_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
     struct wg_parser *parser = gst_pad_get_element_private(pad);
     gboolean ret = TRUE;
 
-    GST_LOG("parser %p, type \"%s\".", parser, GST_EVENT_TYPE_NAME(event));
+    GST_DEBUG("parser %p, type \"%s\".", parser, GST_EVENT_TYPE_NAME(event));
 
     switch (event->type)
     {
-- 
2.46.0

