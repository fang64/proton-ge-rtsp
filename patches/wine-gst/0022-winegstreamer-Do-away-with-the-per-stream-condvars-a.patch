From 3a3c7d17c4961282b72d521354c2fe0c34dd288d Mon Sep 17 00:00:00 2001
From: Torge Matthies <openglfreak@googlemail.com>
Date: Wed, 31 Jan 2024 17:42:54 +0100
Subject: [PATCH 22/42] winegstreamer: Do away with the per-stream condvars and
 use one parser-wide condvar instead.

---
 dlls/winegstreamer/wg_parser.c | 27 ++++++++++-----------------
 1 file changed, 10 insertions(+), 17 deletions(-)

diff --git a/dlls/winegstreamer/wg_parser.c b/dlls/winegstreamer/wg_parser.c
index e1448533c8d..3bb5da545c6 100644
--- a/dlls/winegstreamer/wg_parser.c
+++ b/dlls/winegstreamer/wg_parser.c
@@ -90,6 +90,7 @@ struct wg_parser
     bool err_on, warn_on;
 
     pthread_cond_t read_cond, read_done_cond;
+    pthread_cond_t stream_event_cond;
     struct
     {
         GstBuffer *buffer;
@@ -124,7 +125,6 @@ struct wg_parser_stream
     GstCaps *current_caps;
     GstCaps *desired_caps;
 
-    pthread_cond_t event_cond, event_empty_cond;
     GstBuffer *buffer;
     GstMapInfo map_info;
 
@@ -360,8 +360,7 @@ static NTSTATUS wg_parser_stream_disable(void *args)
         stream->desired_caps = NULL;
     }
     pthread_mutex_unlock(&parser->mutex);
-    pthread_cond_signal(&stream->event_cond);
-    pthread_cond_signal(&stream->event_empty_cond);
+    pthread_cond_signal(&parser->stream_event_cond);
     return S_OK;
 }
 
@@ -373,7 +372,7 @@ static GstBuffer *wait_parser_stream_buffer(struct wg_parser *parser, struct wg_
      * must return the buffer. */
 
     while (stream->enabled && !(buffer = stream->buffer) && !stream->eos)
-        pthread_cond_wait(&stream->event_cond, &parser->mutex);
+        pthread_cond_wait(&parser->stream_event_cond, &parser->mutex);
 
     return buffer;
 }
@@ -387,7 +386,7 @@ static void release_buffer(struct wg_parser *parser, struct wg_parser_stream *st
         stream->buffer = NULL;
     }
 
-    pthread_cond_signal(&stream->event_empty_cond);
+    pthread_cond_signal(&parser->stream_event_cond);
 }
 
 static NTSTATUS wg_parser_stream_get_buffer(void *args)
@@ -836,7 +835,7 @@ static gboolean sink_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
             pthread_mutex_lock(&parser->mutex);
             stream->eos = true;
             if (stream->enabled)
-                pthread_cond_signal(&stream->event_cond);
+                pthread_cond_signal(&parser->stream_event_cond);
             else
                 pthread_cond_signal(&parser->init_cond);
             pthread_mutex_unlock(&parser->mutex);
@@ -848,7 +847,7 @@ static gboolean sink_event_cb(GstPad *pad, GstObject *parent, GstEvent *event)
             if (stream->enabled)
             {
                 stream->flushing = true;
-                pthread_cond_signal(&stream->event_empty_cond);
+                pthread_cond_signal(&parser->stream_event_cond);
 
                 if (stream->buffer)
                 {
@@ -925,7 +924,7 @@ static GstFlowReturn sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *bu
      * implementing a queue object here. */
 
     while (stream->enabled && !stream->flushing && stream->buffer)
-        pthread_cond_wait(&stream->event_empty_cond, &parser->mutex);
+        pthread_cond_wait(&parser->stream_event_cond, &parser->mutex);
 
     if (!stream->enabled)
     {
@@ -954,7 +953,7 @@ static GstFlowReturn sink_chain_cb(GstPad *pad, GstObject *parent, GstBuffer *bu
     stream->buffer = buffer;
 
     pthread_mutex_unlock(&parser->mutex);
-    pthread_cond_signal(&stream->event_cond);
+    pthread_cond_signal(&parser->stream_event_cond);
 
     /* The chain callback is given a reference to the buffer. Transfer that
      * reference to the stream object, which will release it in
@@ -1108,8 +1107,6 @@ static struct wg_parser_stream *create_stream(struct wg_parser *parser, char *id
     stream->parser = parser;
     stream->number = parser->stream_count;
     stream->no_more_pads = true;
-    pthread_cond_init(&stream->event_cond, NULL);
-    pthread_cond_init(&stream->event_empty_cond, NULL);
 
     sprintf(pad_name, "qz_sink_%u", parser->stream_count);
     stream->my_sink = gst_pad_new(pad_name, GST_PAD_SINK);
@@ -1141,9 +1138,6 @@ static void free_stream(struct wg_parser_stream *stream)
         stream->buffer = NULL;
     }
 
-    pthread_cond_destroy(&stream->event_cond);
-    pthread_cond_destroy(&stream->event_empty_cond);
-
     for (i = 0; i < ARRAY_SIZE(stream->tags); ++i)
     {
         if (stream->tags[i])
@@ -2195,10 +2189,8 @@ static NTSTATUS wg_parser_disconnect(void *args)
     /* Unblock all of our streams. */
     pthread_mutex_lock(&parser->mutex);
     for (i = 0; i < parser->stream_count; ++i)
-    {
         parser->streams[i]->flushing = true;
-        pthread_cond_signal(&parser->streams[i]->event_empty_cond);
-    }
+    pthread_cond_signal(&parser->stream_event_cond);
     pthread_mutex_unlock(&parser->mutex);
 
     gst_element_set_state(parser->container, GST_STATE_NULL);
@@ -2375,6 +2367,7 @@ static NTSTATUS wg_parser_create(void *args)
     pthread_cond_init(&parser->init_cond, NULL);
     pthread_cond_init(&parser->read_cond, NULL);
     pthread_cond_init(&parser->read_done_cond, NULL);
+    pthread_cond_init(&parser->stream_event_cond, NULL);
     parser->init_gst = init_funcs[params->type];
     parser->output_compressed = params->output_compressed;
     parser->err_on = params->err_on;
-- 
2.45.2

